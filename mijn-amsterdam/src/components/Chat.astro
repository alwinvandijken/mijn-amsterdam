---
interface Props {
    title: string;
    language: string;
    orgId: string;
    eswConfigDevName: string;
    siteURL: string;
    scrt2URL: string;
}

const { orgId,eswConfigDevName, siteURL, scrt2URL,language, title, } = Astro.props;
---
Hallo Chat
<ul>
    <li>title: {title}</li>
    <li>language: {language}</li>
    <li>org id: {orgId}</li>
    <li>eswConfigDevName: {eswConfigDevName}</li>
    <li>siteURL: {siteURL}</li>
    <li>scrt2URL: {scrt2URL}</li>
</ul>

<script type='text/javascript'>
    function initEmbeddedMessaging() {
        try {
            embeddedservice_bootstrap.settings.language = 'nl_NL'; // For example, enter 'en' or 'en-US'

            //Turns of the chat button
            embeddedservice_bootstrap.settings.hideChatButtonOnLoad = true;
            embeddedservice_bootstrap.settings.devMode = true;

            embeddedservice_bootstrap.init(
                '00D7a0000005DOS',
                'GemeenteAmsterdamMessagingWeb',
                'https://omnichanneliv--dev.sandbox.my.site.com/ESWGemeenteAmsterdamMessage1/nl-NL',
                {
                    scrt2URL: 'https://omnichanneliv--dev.sandbox.my.salesforce-scrt.com'
                }
            );
        } catch (err) {
            console.error('Error loading Embedded Messaging: ', err);
        }
    };

    function checkIfChatSessionIsCreated() {
        const orgId = '00D7a0000005DOS';
        const storageItemSuffix = '_WEB_STORAGE';
        const storageItem = localStorage.getItem(orgId + storageItemSuffix)

        let hasSession = false;
        if (storageItem) {
            const storageObj = JSON.parse(storageItem);
            if (Object.keys(storageObj).length > 0) {
                hasSession = true;
            }
        }

        return hasSession;
    }

    function showChatBasedOnTaxonomy() {
        return true;
    }

    window.addEventListener("onEmbeddedMessagingReady", e => {
        embeddedservice_bootstrap.prechatAPI.setHiddenPrechatFields({
            "Start_Location" : window.location.href,
            "Chat_Origin": "Website"
        });

        /**
         * Check if u want to turn on the chat button.
         */
        if (checkIfChatSessionIsCreated() || showChatBasedOnTaxonomy()) {
            // Shows the chat button
            setTimeout(() => {
                embeddedservice_bootstrap.utilAPI.showChatButton();
            }, 1000);
        }

        if (checkIfChatSessionIsCreated()) {
            // Launches a chat and can be even used when the button is not visible
            embeddedservice_bootstrap.utilAPI
                .launchChat()
                .then(function (success) {

                })
                .catch(function (error) {
                    // Add actions to run after the chat client launch fails.
                })
                .finally(function () {
                    // Add actions to run whether the chat client launches
                    // successfully or not.
                });
        }
    });
</script>
<script is:inline type='text/javascript' src='../assets/js/bootstrap.js' onload='initEmbeddedMessaging()'></script>


<style is:global>
:root {
    --accent: 236, 0, 0;
    --accent-light: 0, 70, 153;
    --accent-dark: 0, 45, 90;
    --accent-gradient: linear-gradient(
    45deg,
    rgb(var(--accent)),
    rgb(var(--accent-light)) 30%,
    white 60%
    );
    }
html {
    font-family: system-ui, sans-serif;
    background: #13151a;
    }
code {
    font-family:
    Menlo,
    Monaco,
    Lucida Console,
    Liberation Mono,
    DejaVu Sans Mono,
    Bitstream Vera Sans Mono,
    Courier New,
    monospace;
    }
iframe#embeddedMessagingFrame {
    border-radius: 0px !important;
    }

/* Mobile styles (screens smaller than 48em, which is ~768px) */


/* Desktop styles (screens larger than 64em, which is ~1024px) */
@media screen and (min-width: 64em) {
    #embeddedMessagingFrame {
        height: 37.5em; /* ~600px */
        width: 28.125em; /* ~450px */
        border-radius: 0em;
    }
}

</style>
